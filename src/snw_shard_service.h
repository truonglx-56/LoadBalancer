/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SNW_SHARD_SERVICE_H
#define SNW_SHARD_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "snw_shard_service_types.h"

/* ShardService service interface */
typedef struct _snwShardServiceIf snwShardServiceIf;  /* dummy object */

struct _snwShardServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*shard_map) (snwShardServiceIf *iface, GHashTable ** _return, const gchar * type, const gdouble version, const gchar * token, snwInvalidOperation ** ouch, GError **error);
  gboolean (*get_object_id) (snwShardServiceIf *iface, gchar ** _return, const gchar * message, const gdouble version, const gchar * token, snwInvalidOperation ** ouch, GError **error);
};
typedef struct _snwShardServiceIfInterface snwShardServiceIfInterface;

GType snw_shard_service_if_get_type (void);
#define SNW_TYPE_SHARD_SERVICE_IF (snw_shard_service_if_get_type())
#define SNW_SHARD_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SNW_TYPE_SHARD_SERVICE_IF, snwShardServiceIf))
#define SNW_IS_SHARD_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SNW_TYPE_SHARD_SERVICE_IF))
#define SNW_SHARD_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), SNW_TYPE_SHARD_SERVICE_IF, snwShardServiceIfInterface))

gboolean snw_shard_service_if_shard_map (snwShardServiceIf *iface, GHashTable ** _return, const gchar * type, const gdouble version, const gchar * token, snwInvalidOperation ** ouch, GError **error);
gboolean snw_shard_service_if_get_object_id (snwShardServiceIf *iface, gchar ** _return, const gchar * message, const gdouble version, const gchar * token, snwInvalidOperation ** ouch, GError **error);

/* ShardService service client */
struct _snwShardServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _snwShardServiceClient snwShardServiceClient;

struct _snwShardServiceClientClass
{
  GObjectClass parent;
};
typedef struct _snwShardServiceClientClass snwShardServiceClientClass;

GType snw_shard_service_client_get_type (void);
#define SNW_TYPE_SHARD_SERVICE_CLIENT (snw_shard_service_client_get_type())
#define SNW_SHARD_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SNW_TYPE_SHARD_SERVICE_CLIENT, snwShardServiceClient))
#define SNW_SHARD_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), SNW_TYPE_SHARD_SERVICE_CLIENT, snwShardServiceClientClass))
#define SNW_SHARD_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SNW_TYPE_SHARD_SERVICE_CLIENT))
#define SNW_SHARD_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), SNW_TYPE_SHARD_SERVICE_CLIENT))
#define SNW_SHARD_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SNW_TYPE_SHARD_SERVICE_CLIENT, snwShardServiceClientClass))

gboolean snw_shard_service_client_shard_map (snwShardServiceIf * iface, GHashTable ** _return, const gchar * type, const gdouble version, const gchar * token, snwInvalidOperation ** ouch, GError ** error);
gboolean snw_shard_service_client_send_shard_map (snwShardServiceIf * iface, const gchar * type, const gdouble version, const gchar * token, GError ** error);
gboolean snw_shard_service_client_recv_shard_map (snwShardServiceIf * iface, GHashTable ** _return, snwInvalidOperation ** ouch, GError ** error);
gboolean snw_shard_service_client_get_object_id (snwShardServiceIf * iface, gchar ** _return, const gchar * message, const gdouble version, const gchar * token, snwInvalidOperation ** ouch, GError ** error);
gboolean snw_shard_service_client_send_get_object_id (snwShardServiceIf * iface, const gchar * message, const gdouble version, const gchar * token, GError ** error);
gboolean snw_shard_service_client_recv_get_object_id (snwShardServiceIf * iface, gchar ** _return, snwInvalidOperation ** ouch, GError ** error);
void shard_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void shard_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* ShardService handler (abstract base class) */
struct _snwShardServiceHandler
{
  GObject parent;
};
typedef struct _snwShardServiceHandler snwShardServiceHandler;

struct _snwShardServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*shard_map) (snwShardServiceIf *iface, GHashTable ** _return, const gchar * type, const gdouble version, const gchar * token, snwInvalidOperation ** ouch, GError **error);
  gboolean (*get_object_id) (snwShardServiceIf *iface, gchar ** _return, const gchar * message, const gdouble version, const gchar * token, snwInvalidOperation ** ouch, GError **error);
};
typedef struct _snwShardServiceHandlerClass snwShardServiceHandlerClass;

GType snw_shard_service_handler_get_type (void);
#define SNW_TYPE_SHARD_SERVICE_HANDLER (snw_shard_service_handler_get_type())
#define SNW_SHARD_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SNW_TYPE_SHARD_SERVICE_HANDLER, snwShardServiceHandler))
#define SNW_IS_SHARD_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SNW_TYPE_SHARD_SERVICE_HANDLER))
#define SNW_SHARD_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), SNW_TYPE_SHARD_SERVICE_HANDLER, snwShardServiceHandlerClass))
#define SNW_IS_SHARD_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), SNW_TYPE_SHARD_SERVICE_HANDLER))
#define SNW_SHARD_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SNW_TYPE_SHARD_SERVICE_HANDLER, snwShardServiceHandlerClass))

gboolean snw_shard_service_handler_shard_map (snwShardServiceIf *iface, GHashTable ** _return, const gchar * type, const gdouble version, const gchar * token, snwInvalidOperation ** ouch, GError **error);
gboolean snw_shard_service_handler_get_object_id (snwShardServiceIf *iface, gchar ** _return, const gchar * message, const gdouble version, const gchar * token, snwInvalidOperation ** ouch, GError **error);

/* ShardService processor */
struct _snwShardServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  snwShardServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _snwShardServiceProcessor snwShardServiceProcessor;

struct _snwShardServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _snwShardServiceProcessorClass snwShardServiceProcessorClass;

GType snw_shard_service_processor_get_type (void);
#define SNW_TYPE_SHARD_SERVICE_PROCESSOR (snw_shard_service_processor_get_type())
#define SNW_SHARD_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SNW_TYPE_SHARD_SERVICE_PROCESSOR, snwShardServiceProcessor))
#define SNW_IS_SHARD_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SNW_TYPE_SHARD_SERVICE_PROCESSOR))
#define SNW_SHARD_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), SNW_TYPE_SHARD_SERVICE_PROCESSOR, snwShardServiceProcessorClass))
#define SNW_IS_SHARD_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), SNW_TYPE_SHARD_SERVICE_PROCESSOR))
#define SNW_SHARD_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SNW_TYPE_SHARD_SERVICE_PROCESSOR, snwShardServiceProcessorClass))

#endif /* SNW_SHARD_SERVICE_H */
